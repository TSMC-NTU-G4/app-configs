apiVersion: batch/v1
kind: CronJob
metadata:
  name: earthquake-generator
spec:
  schedule: "*/30 * * * *"
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 60
      template:
        spec:
          concurrencyPolicy: Forbid
          containers:
          - name: earthquake-generator
            image: curlimages/curl:latest
            command: ["/bin/sh", "-c"]
            args:
              - |
                pip install requests &&
                cat << 'EOF' > /tmp/earthquake_generator.py
                import requests
                import json
                import random
                from datetime import datetime, timezone, timedelta
                import os
                
                def generate_earthquake_data():
                    """Generate and send simulated earthquake data to API"""
                    
                    # Get backend service URL from environment variable
                    backend_url = os.getenv('BACKEND_URL', 'http://backend:8000')
                    
                    # List of available areas
                    available_areas = ["Taipei", "Taichung", "Tainan", "Hsinchu"]
                    
                    # Epicenter location options
                    epicenter_locations = [
                        "台北市北投區", "新竹縣竹北市", "台中市西屯區", 
                        "台南市安南區", "花蓮縣秀林鄉", "宜蘭縣頭城鎮",
                        "南投縣仁愛鄉", "雲林縣斗六市"
                    ]

                    # Use Taiwan timezone (UTC+8)
                    taiwan_tz = timezone(timedelta(hours=8))
                    current_time = datetime.now(taiwan_tz)
                    
                    # Convert to ISO format with timezone info
                    origin_time_iso = current_time.isoformat()
                    
                    # Randomly select 1-4 areas
                    num_areas = random.randint(1, 4)
                    selected_areas = random.sample(available_areas, num_areas)
                    
                    # Generate intensity data for each selected area
                    shaking_area = []
                    for area in selected_areas:
                        shaking_area.append({
                            "countyName": area,
                            "areaIntensity": random.randint(1, 9)
                        })
                    
                    # Construct request data
                    earthquake_data = {
                        "source": f"CronJob-Generated",
                        "originTime": origin_time_iso,
                        "epicenterLocation": random.choice(epicenter_locations),
                        "magnitudeValue": round(random.uniform(0, 9), 1),
                        "focalDepth": random.randint(0, 500),
                        "shakingArea": shaking_area
                    }
                    
                    # Send POST request
                    try:
                        response = requests.post(
                            f'{backend_url}/api/earthquake/',
                            headers={
                                'accept': 'application/json',
                                'Content-Type': 'application/json'
                            },
                            json=earthquake_data,
                            timeout=30
                        )
                        
                        if response.status_code in [200, 201]:
                            print(f"✅ Data sent successfully")
                            print(f"   Time: {current_time.strftime('%Y-%m-%d %H:%M:%S')}")
                            print(f"   Magnitude: {earthquake_data['magnitudeValue']}")
                            print(f"   Depth: {earthquake_data['focalDepth']} km")
                            print(f"   Affected Areas: {[area['countyName'] for area in shaking_area]}")
                        else:
                            print(f"❌ Failed to send data: {response.status_code}")
                            print(f"   Error Message: {response.text}")
                            exit(1)
                            
                    except requests.exceptions.RequestException as e:
                        print(f"❌ Network error: {e}")
                        exit(1)
                    
                    # Output JSON data for review
                    print(f"📝 Data Content: {json.dumps(earthquake_data, indent=2, ensure_ascii=False)}")
                    print("-" * 50)
                
                if __name__ == "__main__":
                    print("🌍 Generating earthquake data...")
                    generate_earthquake_data()
                    print("✅ Task completed successfully")
                EOF
                python /tmp/earthquake_generator.py
            env:
            - name: BACKEND_URL
              value: "http://backend:8000"
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "128Mi"
                cpu: "100m"